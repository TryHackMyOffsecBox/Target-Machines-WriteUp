"use strict";(self.webpackChunktarget_machines_write_up=self.webpackChunktarget_machines_write_up||[]).push([[6172],{29874:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"HackTheBox/Battlegrounds/Cyber Mayhem/Intertwined","title":"Intertwined","description":"\u4fe1\u606f\u6536\u96c6","source":"@site/docs/HackTheBox/Battlegrounds/Cyber Mayhem/Intertwined.md","sourceDirName":"HackTheBox/Battlegrounds/Cyber Mayhem","slug":"/HackTheBox/Battlegrounds/Cyber Mayhem/Intertwined","permalink":"/Target-Machines-WriteUp/docs/HackTheBox/Battlegrounds/Cyber Mayhem/Intertwined","draft":false,"unlisted":false,"editUrl":"https://github.com/TryHackMyOffsecBox/Target-Machines-WriteUp/edit/main/docs/HackTheBox/Battlegrounds/Cyber Mayhem/Intertwined.md","tags":[],"version":"current","frontMatter":{},"sidebar":"HackTheBox_Sidebar","previous":{"title":"Grapple","permalink":"/Target-Machines-WriteUp/docs/HackTheBox/Battlegrounds/Cyber Mayhem/Grapple"},"next":{"title":"Juggler","permalink":"/Target-Machines-WriteUp/docs/HackTheBox/Battlegrounds/Cyber Mayhem/Juggler"}}');var t=s(74848),o=s(28453);const a={},i="Intertwined",c={},d=[{value:"\u4fe1\u606f\u6536\u96c6",id:"\u4fe1\u606f\u6536\u96c6",level:2},{value:"Web Service Nodejs",id:"web-service-nodejs",level:2}];function p(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"intertwined",children:"Intertwined"})}),"\n",(0,t.jsx)(n.h2,{id:"\u4fe1\u606f\u6536\u96c6",children:"\u4fe1\u606f\u6536\u96c6"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'(remote) root@htb:/root# ss -tuln | grep LISTEN | grep "0.0.0.0"\ntcp    LISTEN  0       128          127.0.0.1:27017        0.0.0.0:*            \ntcp    LISTEN  0       511            0.0.0.0:8080         0.0.0.0:*            \ntcp    LISTEN  0       4096           0.0.0.0:10000        0.0.0.0:*            \ntcp    LISTEN  0       4096     127.0.0.53%lo:53           0.0.0.0:*            \ntcp    LISTEN  0       128            0.0.0.0:22           0.0.0.0:*  \n'})}),"\n",(0,t.jsx)(n.h2,{id:"web-service-nodejs",children:"Web Service Nodejs"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",metastring:'title="index.js"',children:'const http = require("http");\nconst app = require("./app");\nconst server = http.createServer(app);\n\nconst { API_PORT } = process.env;\nconst port = process.env.PORT || API_PORT;\n\nserver.listen(port, () => {\n    console.log(`Server running on port ${port}`);\n});\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",metastring:'title="app.js"',children:"require(\"dotenv\").config();\nrequire(\"./config/database\").connect();\nconst express = require(\"express\");\nconst bcrypt = require(\"bcryptjs\");\nconst jwt = require(\"jsonwebtoken\");\nconst bodyParser = require('body-parser');\nconst User = require(\"./model/user\");\nconst auth = require(\"./middleware/auth\");\nconst path = require('path');\nconst app = express();\nconst cookieParser = require('cookie-parser');\nconst ejs = require('ejs');\nconst { base64encode, base64decode } = require('nodejs-base64');\nconst nodesrv = require('node-srv');\n\n\n\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: true }));\napp.use(cookieParser());\n\napp.use(express.json({ limit: \"50mb\" }));\napp.set('views', path.join(__dirname, 'views'));\napp.set('view engine', 'ejs');\n//setup public folder\napp.use(express.static('./public'));\n\nvar staticfileserver = new nodesrv({\n    port: 8080,\n    root: './www',\n    logs: true\n}, function () {\n    console.log('Server stopped');\n});\n\napp.get('/logout', function(req, res){\n    cookie = req.cookies.token;\n    if(cookie != undefined){\n    res.clearCookie('token', { path: '/' })\n      res.redirect('/');\n    }\n    res.clearCookie('token', { path: '/' })\n\n    res.redirect('/');\n  });\n  \n  \napp.get(\"/\", async (req, res) => {\n  res.render('index')\n})\n\n// app.post(\"/signup\", async (req, res) => {\n//   try {\n//     // Get user input\n//     console.log(req.body)\n//     const { username, email, password } = req.body;\n\n//     // Validate user input\n//     if (!(email && password && username)) {\n//       res.status(400).send(\"All input is required\");\n//     }\n\n//     // check if user already exist\n//     // Validate if user exist in our database\n//     const oldUser = await User.findOne({ email });\n\n//     if (oldUser) {\n//       return res.status(409).send(\"User Already Exist. Please Login\");\n//     }\n\n//     //Encrypt user password\n//     encryptedPassword = await bcrypt.hash(password, 10);\n\n//     // Create user in our database\n//     const user = await User.create({\n//       username,\n//       email: email.toLowerCase(), // sanitize: convert email to lowercase\n//       password: encryptedPassword,\n//     });\n\n//     // Create token\n//     const token = jwt.sign(\n//       { user_id: user._id, email, username },\n//       process.env.TOKEN_KEY,\n//       {\n//         expiresIn: \"2h\",\n//       }\n//     );\n//     // save user token\n//     user.token = token;\n\n//     // return new user\n//     let options = {\n//       maxAge: 1000 * 60 * 15, // would expire after 15 minutes\n//       httpOnly: true, // The cookie only accessible by the web server\n//       signed: false // Indicates if the cookie should be signed\n//   }\n\n//     res.cookie('token', user.token , options) // options is optional\n//     res.status(201).redirect('/profile');\n//   } catch (err) {\n//     console.log(err);\n//   }\n// });\n\napp.post(\"/signup\", async (req, res) => {\n    res.status(500).send(\"Registration disabled\");\n})\n\n// Test Creds \n// username: testuser\n// email: test@test.htb\n// Password: testpassword\n\napp.post(\"/login\", async (req, res) => {\n  try {\n    // Get user input\n    console.log(req.body)\n    const { email, password } = req.body;\n\n    // Validate user input\n    if (!(email && password)) {\n      res.status(400).send(\"All input is required\");\n    }\n    // Validate if user exist in our database\n    const user = await User.findOne({ email });\n    console.log(user)\n    if (user && (await bcrypt.compare(password, user.password))) {\n      // Create token\n      const token = jwt.sign(\n        { user_id: user._id, email , username: user.username },\n        process.env.TOKEN_KEY,\n        {\n          expiresIn: \"2h\",\n        }\n      );\n\n      // save user token\n      user.token = token;\n    // return new user\n    let options = {\n      maxAge: 1000 * 60 * 15, // would expire after 15 minutes\n      httpOnly: true, // The cookie only accessible by the web server\n      signed: false // Indicates if the cookie should be signed\n  }\n\n      // user\n      console.log(user)\n      res.cookie('token', user.token , options) // options is optional\n\n      res.status(200).redirect('/profile');\n    }\n    res.status(400).send(\"Invalid Credentials\");\n  } catch (err) {\n    console.log(err);\n  }\n});\n\napp.get(\"/profile\", auth, (req, res) => {\n  const  ca = req.cookies.token;\n  const  base64Url = ca.split('.')[1];\n  const decodedValue = JSON.parse(base64decode(base64Url));\n  console.log(decodedValue)\n  html = showProfile(decodedValue.username)\n  res.status(200).send(html);\n});\n\n// This should be the last route else any after it won't work\napp.use(\"*\", (req, res) => {\n  res.status(404).json({\n    success: \"false\",\n    message: \"Page not found\",\n    error: {\n      statusCode: 404,\n      message: \"You reached a route that is not defined on this server\",\n    },\n  });\n});\n"})}),"\n",(0,t.jsx)(n.p,{children:"\u5728\u5176\u4e2d\u83b7\u5f97\u4e00\u4e2a\u6d4b\u8bd5\u51ed\u636e"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-plaintext",children:"username: testuser\nemail: test@test.htb\nPassword: testpassword\n"})})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(p,{...e})}):p(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>i});var r=s(96540);const t={},o=r.createContext(t);function a(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);