"use strict";(self.webpackChunktarget_machines_write_up=self.webpackChunktarget_machines_write_up||[]).push([[5413],{50399:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"ToolsGuide/index","title":"\u5de5\u5177\u6307\u5357","description":"\u73af\u5883\u4fe1\u606f\u6536\u96c6","source":"@site/docs/ToolsGuide/index.md","sourceDirName":"ToolsGuide","slug":"/ToolsGuide/","permalink":"/Target-Machines-WriteUp/docs/ToolsGuide/","draft":false,"unlisted":false,"editUrl":"https://github.com/TryHackMyOffsecBox/Target-Machines-WriteUp/edit/main/docs/ToolsGuide/index.md","tags":[],"version":"current","sidebarPosition":0,"frontMatter":{"sidebar_position":0},"sidebar":"ToolsGuide_Sidebar","next":{"title":"hydra","permalink":"/Target-Machines-WriteUp/docs/ToolsGuide/Brute-Forcing/hydra"}}');var t=s(74848),o=s(28453);const r={sidebar_position:0},a="\u5de5\u5177\u6307\u5357",c={},l=[{value:"\u73af\u5883\u4fe1\u606f\u6536\u96c6",id:"\u73af\u5883\u4fe1\u606f\u6536\u96c6",level:2},{value:"Web Service \u4fe1\u606f\u641c\u96c6",id:"web-service-\u4fe1\u606f\u641c\u96c6",level:2},{value:"\u57fa\u7840\u63d0\u6743\u8def\u5f84\u6392\u67e5",id:"\u57fa\u7840\u63d0\u6743\u8def\u5f84\u6392\u67e5",level:2},{value:"\u4e00\u7ad9\u5f0f\u811a\u672c",id:"\u4e00\u7ad9\u5f0f\u811a\u672c",level:2},{value:"\u53c2\u8003\u8d44\u6599",id:"\u53c2\u8003\u8d44\u6599",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"\u5de5\u5177\u6307\u5357",children:"\u5de5\u5177\u6307\u5357"})}),"\n",(0,t.jsx)(n.h2,{id:"\u73af\u5883\u4fe1\u606f\u6536\u96c6",children:"\u73af\u5883\u4fe1\u606f\u6536\u96c6"}),"\n",(0,t.jsxs)(n.p,{children:["\u4f7f\u7528 ",(0,t.jsx)(n.code,{children:"netstat"})," \u67e5\u8be2\u5bf9\u5916\u5f00\u653e\u7aef\u53e3"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"netstat -anopt | grep \":::\" | while read -r line; do pid=$(echo \"$line\" | awk '{print $7}' | cut -d'/' -f1); port=$(echo \"$line\" | awk '{print $4}' | rev | cut -d':' -f1 | rev); cmdline=$(cat /proc/\"$pid\"/cmdline | tr '\\0' ' '); echo -e \"Port: $port, PID: $pid\\n\u2014> Command: $(echo \"$cmdline\" | sed -E 's/(apache2?|nginx|java|python|node|ftp)/\\x1b[31m&\\x1b[0m/g')\"; done\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"echo bmV0c3RhdCAtYW5vcHQgfCBncmVwICI6OjoiIHwgd2hpbGUgcmVhZCAtciBsaW5lOyBkbyBwaWQ9JChlY2hvICIkbGluZSIgfCBhd2sgJ3twcmludCAkN30nIHwgY3V0IC1kJy8nIC1mMSk7IHBvcnQ9JChlY2hvICIkbGluZSIgfCBhd2sgJ3twcmludCAkNH0nIHwgcmV2IHwgY3V0IC1kJzonIC1mMSB8IHJldik7IGNtZGxpbmU9JChjYXQgL3Byb2MvIiRwaWQiL2NtZGxpbmUgfCB0ciAnXDAnICcgJyk7IGVjaG8gLWUgIlBvcnQ6ICRwb3J0LCBQSUQ6ICRwaWRcbuKAlD4gQ29tbWFuZDogJChlY2hvICIkY21kbGluZSIgfCBzZWQgLUUgJ3MvKGFwYWNoZTI/fG5naW54fGphdmF8cHl0aG9ufG5vZGV8ZnRwKS9ceDFiWzMxbSZceDFiWzBtL2cnKSI7IGRvbmU= | base64 -d | bash\n"})}),"\n",(0,t.jsxs)(n.p,{children:["\u4f7f\u7528 ",(0,t.jsx)(n.code,{children:"ss"})," \u914d\u5408",(0,t.jsx)(n.code,{children:"lsof"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"ss -tuln | grep LISTEN | grep \"0.0.0.0\" | while read -r line; do port=$(echo \"$line\" | awk '{print $5}' | rev | cut -d':' -f1 | rev); pid=$(lsof -i :$port | grep LISTEN | awk '{print $2}' | head -n 1); [ -n \"$pid\" ] && cmdline=$(cat /proc/$pid/cmdline | tr '\\0' ' ') && echo -e \"Port: $port, PID: $pid\\n\u2014> Command: $(echo \"$cmdline\" | sed -E 's/(apache2?|nginx|java|python|node|ftp)/\\x1b[31m&\\x1b[0m/g')\" || echo -e \"Port: $port, PID: Not found\\n\u2014> Command: Not available\"; done\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"echo c3MgLXR1bG4gfCBncmVwIExJU1RFTiB8IGdyZXAgIjAuMC4wLjAiIHwgd2hpbGUgcmVhZCAtciBsaW5lOyBkbyBwb3J0PSQoZWNobyAiJGxpbmUiIHwgYXdrICd7cHJpbnQgJDV9JyB8IHJldiB8IGN1dCAtZCc6JyAtZjEgfCByZXYpOyBwaWQ9JChsc29mIC1pIDokcG9ydCB8IGdyZXAgTElTVEVOIHwgYXdrICd7cHJpbnQgJDJ9JyB8IGhlYWQgLW4gMSk7IFsgLW4gIiRwaWQiIF0gJiYgY21kbGluZT0kKGNhdCAvcHJvYy8kcGlkL2NtZGxpbmUgfCB0ciAnXDAnICcgJykgJiYgZWNobyAtZSAiUG9ydDogJHBvcnQsIFBJRDogJHBpZFxu4oCUPiBDb21tYW5kOiAkKGVjaG8gIiRjbWRsaW5lIiB8IHNlZCAtRSAncy8oYXBhY2hlMj98bmdpbnh8amF2YXxweXRob258bm9kZXxmdHApL1x4MWJbMzFtJlx4MWJbMG0vZycpIiB8fCBlY2hvIC1lICJQb3J0OiAkcG9ydCwgUElEOiBOb3QgZm91bmRcbuKAlD4gQ29tbWFuZDogTm90IGF2YWlsYWJsZSI7IGRvbmU= | base64 -d | bash\n"})}),"\n",(0,t.jsxs)(n.p,{children:["\u4f7f\u7528 ",(0,t.jsx)(n.code,{children:"lsof"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:'lsof -i | grep "*:"\n'})}),"\n",(0,t.jsx)(n.h2,{id:"web-service-\u4fe1\u606f\u641c\u96c6",children:"Web Service \u4fe1\u606f\u641c\u96c6"}),"\n",(0,t.jsx)(n.p,{children:"\u9488\u5bf9 apache2 \u670d\u52a1\u67e5\u8be2\u89e3\u6790\u914d\u7f6e"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"sed -n '/ServerName/p; /ServerAlias/p; /DocumentRoot/p' /etc/apache2/sites-enabled/*\n"})}),"\n",(0,t.jsx)(n.p,{children:"\u9488\u5bf9 nginx \u670d\u52a1\u67e5\u8be2\u89e3\u6790\u914d\u7f6e"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"sed -n '/server_name/p; /root/p' /etc/nginx/sites-enabled/*\n"})}),"\n",(0,t.jsx)(n.p,{children:"\u9488\u5bf9 nginx \u670d\u52a1\u67e5\u8be2\u89e3\u6790\u914d\u7f6e\uff0c\u5e76\u81ea\u52a8\u751f\u6210hosts\u8bb0\u5f55"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:'ip=$(ip -4 addr show eth0 | grep -oP \'(?<=inet\\s)\\d+(\\.\\d+){3}\') && all_hosts="" && for file in /etc/nginx/sites-enabled/*; do server_names=$(sed -n \'/^\\s*server_name\\s.*;\\s*$/p\' "$file" | awk -F \'server_name\' \'{print $2}\' | sed \'s/;//g\' | tr -s \' \'); root_dir=$(sed -n \'/^\\s*root\\s.*;\\s*$/p\' "$file" | awk \'{print $2}\' | sed \'s/;//g\'); if [ -n "$server_names" ]; then echo -e "File: $file\\nRoot: $root_dir\\nHosts:" && echo "$server_names" | awk -v ip="$ip" \'{print ip, $0}\'; all_hosts+="$(echo "$server_names" | awk -v ip="$ip" \'{print ip, $0}\')\\n"; echo "\u2014\u2014\u2014"; fi; done && echo -e "\\nUnique Hosts:" && echo -e "$all_hosts" | sort | uniq\n'})}),"\n",(0,t.jsx)(n.p,{children:"\u5feb\u901f\u641c\u7d22\u9ad8\u5371\u547d\u4ee4\u6267\u884c\u51fd\u6570"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:'grep -r -n -E --include="*.php" "(eval\\(|exec\\(|system\\(|passthru\\(|shell_exec\\(|popen\\(|proc_open\\(|assert\\(|create_function\\(|preg_replace\\s*\\(.*/e)" /var/www | awk -F: \'{print "File: " $1 "\\nLine: " $2 "\\nCode: " $3 "\\n"}\'\n'})}),"\n",(0,t.jsx)(n.h2,{id:"\u57fa\u7840\u63d0\u6743\u8def\u5f84\u6392\u67e5",children:"\u57fa\u7840\u63d0\u6743\u8def\u5f84\u6392\u67e5"}),"\n",(0,t.jsx)(n.p,{children:"\u5217\u51fa sudo \u53ef\u6267\u884c\u8303\u56f4"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"sudo -l\n"})}),"\n",(0,t.jsx)(n.p,{children:"\u5bfb\u627e suid \u7279\u6b8a\u6587\u4ef6"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"find / -perm -u=s -type f -executable 2>/dev/null\n"})}),"\n",(0,t.jsx)(n.p,{children:"\u5bfb\u627e\u7279\u6b8a\u7a0b\u5e8f\u80fd\u529b"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"getcap -r / 2>/dev/null\n"})}),"\n",(0,t.jsx)(n.h2,{id:"\u4e00\u7ad9\u5f0f\u811a\u672c",children:"\u4e00\u7ad9\u5f0f\u811a\u672c"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'#!/bin/bash\n\n# Function to check if a command exists\ncheck_command() {\n    if command -v $1 &> /dev/null; then\n        return 0\n    else\n        return 1\n    fi\n}\n\n# Check if ss and lsof exist\nif check_command ss && check_command lsof; then\n    echo "Detected ss and lsof, executing related commands..."\n    ss -tuln | grep LISTEN | grep "0.0.0.0" | while read -r line; do\n        port=$(echo "$line" | awk \'{print $5}\' | rev | cut -d\':\' -f1 | rev)\n        pid=$(lsof -i :$port | grep LISTEN | awk \'{print $2}\' | head -n 1)\n        if [ -n "$pid" ]; then\n            cmdline=$(cat /proc/$pid/cmdline | tr \'\\0\' \' \')\n            echo -e "Port: $port, PID: $pid\\n\u2014> Command: $(echo "$cmdline" | sed -E \'s/(apache2?|nginx|java|python|node|ftp)/\\x1b[31m&\\x1b[0m/g\')"\n        else\n            echo -e "Port: $port, PID: Not found\\n\u2014> Command: Not available"\n        fi\n    done\n# Check if netstat exists\nelif check_command netstat; then\n    echo "Detected netstat, executing related commands..."\n    netstat -anopt | grep ":::" | while read -r line; do\n        pid=$(echo "$line" | awk \'{print $7}\' | cut -d\'/\' -f1)\n        port=$(echo "$line" | awk \'{print $4}\' | rev | cut -d\':\' -f1 | rev)\n        cmdline=$(cat /proc/"$pid"/cmdline | tr \'\\0\' \' \')\n        echo -e "Port: $port, PID: $pid\\n\u2014> Command: $(echo "$cmdline" | sed -E \'s/(apache2?|nginx|java|python|node|ftp)/\\x1b[31m&\\x1b[0m/g\')"\n    done\n# If none of the commands exist\nelse\n    echo -e "\\x1b[31mWarning: Neither ss, lsof, nor netstat commands were found. The script cannot proceed.\\x1b[0m"\n    exit 1\nfi\n\n# Output a separator\necho -e "\\n## \u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014 ##\\n"\n\n# Check if nginx exists\nif check_command nginx; then\n    echo "Detected nginx, analyzing its configuration..."\n\n    # Get the IP address of eth0\n    ip=$(ip -4 addr show eth0 | grep -oP \'(?<=inet\\s)\\d+(\\.\\d+){3}\')\n\n    # Initialize a variable to store all hosts\n    all_hosts=""\n\n    # Loop through all enabled nginx configuration files\n    for file in /etc/nginx/sites-enabled/*; do\n        # Extract server_names and root directory\n        server_names=$(sed -n \'/^\\s*server_name\\s.*;\\s*$/p\' "$file" | awk -F \'server_name\' \'{print $2}\' | sed \'s/;//g\' | tr -s \' \')\n        root_dir=$(sed -n \'/^\\s*root\\s.*;\\s*$/p\' "$file" | awk \'{print $2}\' | sed \'s/;//g\')\n\n        # If server_names are found, print the details\n        if [ -n "$server_names" ]; then\n            echo -e "File: $file\\nRoot: $root_dir\\nHosts:"\n            echo "$server_names" | awk -v ip="$ip" \'{print ip, $0}\'\n            all_hosts+="$(echo "$server_names" | awk -v ip="$ip" \'{print ip, $0}\')\\n"\n            echo "\u2014\u2014\u2014"\n        fi\n    done\n\n    # Print unique hosts\n    echo -e "\\nUnique Hosts:"\n    echo -e "$all_hosts" | sort | uniq\nelse\n    echo "Nginx is not installed."\nfi\n\n# Output a separator\necho -e "\\n## \u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014 ##\\n"\n\n# Check if apache (httpd) exists\nif check_command apache2 || check_command httpd; then\n    echo "Detected apache, analyzing its configuration..."\n\n    # Get the IP address of eth0\n    ip=$(ip -4 addr show eth0 | grep -oP \'(?<=inet\\s)\\d+(\\.\\d+){3}\')\n\n    # Initialize a variable to store all hosts\n    all_hosts=""\n\n    # Loop through all enabled apache configuration files\n    for file in /etc/apache2/sites-enabled/*; do\n        # Extract ServerName and ServerAlias\n        server_name=$(sed -n \'/^\\s*ServerName\\s.*$/p\' "$file" | awk \'{print $2}\')\n        server_aliases=$(sed -n \'/^\\s*ServerAlias\\s.*$/p\' "$file" | awk \'{print $2}\')\n\n        # Combine ServerName and ServerAlias\n        if [ -n "$server_name" ]; then\n            hosts="$server_name"\n            if [ -n "$server_aliases" ]; then\n                hosts+=" $server_aliases"\n            fi\n\n            # Extract DocumentRoot\n            document_root=$(sed -n \'/^\\s*DocumentRoot\\s.*$/p\' "$file" | awk \'{print $2}\')\n\n            # Print the details\n            echo -e "File: $file\\nDocumentRoot: $document_root\\nHosts:"\n            echo "$hosts" | tr \' \' \'\\n\' | awk -v ip="$ip" \'{print ip, $0}\'\n            all_hosts+="$(echo "$hosts" | tr \' \' \'\\n\' | awk -v ip="$ip" \'{print ip, $0}\')\\n"\n            echo "\u2014\u2014\u2014"\n        fi\n    done\n\n    # Print unique hosts\n    echo -e "\\nUnique Hosts:"\n    echo -e "$all_hosts" | sort | uniq\nelse\n    echo "Apache is not installed."\nfi\n'})}),"\n",(0,t.jsx)(n.h2,{id:"\u53c2\u8003\u8d44\u6599",children:"\u53c2\u8003\u8d44\u6599"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://exploit-notes.hdks.org/exploit/linux/privilege-escalation/",children:"Linux Privilege Escalation | Exploit Notes"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://exploit-notes.hdks.org/",children:"Exploit Notes"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://j4ckie0x17.gitbook.io/notes-pentesting",children:"whoami | J4ckie0x17"})})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>a});var i=s(96540);const t={},o=i.createContext(t);function r(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);