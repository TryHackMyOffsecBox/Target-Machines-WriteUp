"use strict";(self.webpackChunktarget_machines_write_up=self.webpackChunktarget_machines_write_up||[]).push([[6780],{41403:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>p,frontMatter:()=>a,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"HackTheBox/Challenges/Crypto/Initialization/index","title":"Initialization","description":"Difficulty: VERY EASY","source":"@site/docs/HackTheBox/Challenges/Crypto/Initialization/index.md","sourceDirName":"HackTheBox/Challenges/Crypto/Initialization","slug":"/HackTheBox/Challenges/Crypto/Initialization/","permalink":"/Target-Machines-WriteUp/docs/HackTheBox/Challenges/Crypto/Initialization/","draft":false,"unlisted":false,"editUrl":"https://github.com/TryHackMyOffsecBox/Target-Machines-WriteUp/edit/main/docs/HackTheBox/Challenges/Crypto/Initialization/index.md","tags":[],"version":"current","frontMatter":{},"sidebar":"HackTheBox_Sidebar","previous":{"title":"Ancient Encodings","permalink":"/Target-Machines-WriteUp/docs/HackTheBox/Challenges/Crypto/Ancient Encodings/"},"next":{"title":"Forensics","permalink":"/Target-Machines-WriteUp/docs/category/HackTheBox-Challenges-Forensics"}}');var r=t(74848),o=t(28453);const a={},s="Initialization",c={},l=[];function d(e){const n={admonition:"admonition",code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"initialization",children:"Initialization"})}),"\n",(0,r.jsxs)(n.admonition,{title:"CHALLENGE DESCRIPTION",type:"note",children:[(0,r.jsx)(n.p,{children:"Difficulty: VERY EASY"}),(0,r.jsx)(n.p,{children:"During a cyber security audit of your government's infrastructure, you discover log entries showing traffic directed towards an IP address within the enemy territory of \"Oumara\". This alarming revelation triggers suspicion of a mole within Lusons' government. Determined to unveil the truth, you analyze the encryption scheme with the goal of breaking it and decrypting the suspicious communication. Your objective is to extract vital information and gather intelligence, ultimately protecting your nation from potential threats."}),(0,r.jsx)(n.p,{children:"\u5728\u5bf9\u653f\u5e9c\u57fa\u7840\u8bbe\u65bd\u8fdb\u884c\u7f51\u7edc\u5b89\u5168\u5ba1\u8ba1\u65f6\uff0c\u4f60\u53d1\u73b0\u4e86\u4e00\u4e9b\u65e5\u5fd7\u6761\u76ee\uff0c\u663e\u793a\u6d41\u91cf\u88ab\u5b9a\u5411\u5230\u654c\u5bf9\u56fd\u5bb6 \u201cOumara\u201d \u5883\u5185\u7684\u4e00\u4e2a IP \u5730\u5740\u3002\u8fd9\u4e00\u4ee4\u4eba\u9707\u60ca\u7684\u53d1\u73b0\u5f15\u53d1\u4e86\u6000\u7591\uff0c\u8ba4\u4e3a Lusons \u653f\u5e9c\u5185\u90e8\u53ef\u80fd\u5b58\u5728\u5185\u5978\u3002\u4e3a\u4e86\u63ed\u9732\u771f\u76f8\uff0c\u4f60\u51b3\u5b9a\u5206\u6790\u52a0\u5bc6\u65b9\u6848\uff0c\u76ee\u6807\u662f\u7834\u89e3\u5b83\u5e76\u89e3\u5bc6\u8fd9\u4e9b\u53ef\u7591\u7684\u901a\u4fe1\u3002\u4f60\u7684\u76ee\u6807\u662f\u63d0\u53d6\u5173\u952e\u4fe1\u606f\u5e76\u6536\u96c6\u60c5\u62a5\uff0c\u6700\u7ec8\u4fdd\u62a4\u4f60\u7684\u56fd\u5bb6\u514d\u53d7\u6f5c\u5728\u7684\u5a01\u80c1\u3002"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",metastring:'title="source.py"',children:"#!/usr/bin/env python3\n\nimport os\nfrom Crypto.Util import Counter\nfrom Crypto.Util.Padding import pad\nfrom Crypto.Cipher import AES\n\nclass AdvancedEncryption:\n    def __init__(self, block_size):\n        self.KEYS = self.generate_encryption_keys()\n        self.CTRs = [Counter.new(block_size) for i in range(len(MSG))] # nonce reuse : avoided!\n\n    def generate_encryption_keys(self):\n        keys = [[b'\\x00']*16] * len(MSG)\n        for i in range(len(keys)):\n            for j in range(len(keys[i])):\n                keys[i][j] = os.urandom(1)\n        return keys\n\n    def encrypt(self, i, msg):\n        key = b''.join(self.KEYS[i])\n        ctr = self.CTRs[i]\n        cipher = AES.new(key, AES.MODE_CTR, counter=ctr)\n        return cipher.encrypt(pad(msg.encode(), 16))\n\ndef main():\n    AE = AdvancedEncryption(128)\n    with open('output.txt', 'w') as f:\n        for i in range(len(MSG)):\n            ct = AE.encrypt(i, MSG[i])\n            f.write(ct.hex()+'\\n')\n\nif __name__ == '__main__':\n    with open('messages.txt') as f:\n        MSG = eval(f.read())\n    main()\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-plaintext",metastring:'title="messages.txt"',children:"[\n    'This is some public information that can be read out loud.',\n    'No one can crack our encryption algorithm.',\n    'HTB{?????????????????????????????????????????????}',\n    'Secret information is encrypted with Advanced Encryption Standards.',\n]\n"})}),"\n",(0,r.jsx)(n.p,{children:"\u770b\u8d77\u6765\u5c31\u662f\u5b9e\u73b0\u4e86\u4e00\u4e2a AES \u52a0\u5bc6\u903b\u8f91\uff0c\u5c1d\u8bd5\u7f16\u5199\u89e3\u5bc6\u811a\u672c"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from pwn import unhex, xor\n\nP = [i.strip() for i in open("messages.txt", "r").read()[1:-2].replace(",", "").strip().split("\'") if i.strip() != ""]\n\nC = open("output.txt", "r").read().splitlines()\n\nres = xor(unhex(C[2]), unhex(C[3]), P[3].encode())\n\nres = "".join([chr(i) for i in res if i in range(0, 127)])\n\nres = res[0 : res.find("}") + 1]\n\nprint(res)\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-plaintext",metastring:'title="Flag"',children:"HTB{d4mn_th3s3_ins3cur3_bl0ckch41n_p4r4m3t3rs!!!!}\n"})})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>s});var i=t(96540);const r={},o=i.createContext(r);function a(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);