"use strict";(self.webpackChunktarget_machines_write_up=self.webpackChunktarget_machines_write_up||[]).push([[6172],{29874:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>l,frontMatter:()=>o,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"HackTheBox/Battlegrounds/Cyber Mayhem/Intertwined","title":"Intertwined","description":"\u4fe1\u606f\u6536\u96c6","source":"@site/docs/HackTheBox/Battlegrounds/Cyber Mayhem/Intertwined.md","sourceDirName":"HackTheBox/Battlegrounds/Cyber Mayhem","slug":"/HackTheBox/Battlegrounds/Cyber Mayhem/Intertwined","permalink":"/Target-Machines-WriteUp/docs/HackTheBox/Battlegrounds/Cyber Mayhem/Intertwined","draft":false,"unlisted":false,"editUrl":"https://github.com/TryHackMyOffsecBox/Target-Machines-WriteUp/edit/main/docs/HackTheBox/Battlegrounds/Cyber Mayhem/Intertwined.md","tags":[],"version":"current","frontMatter":{},"sidebar":"HackTheBox_Sidebar","previous":{"title":"Illogical","permalink":"/Target-Machines-WriteUp/docs/HackTheBox/Battlegrounds/Cyber Mayhem/Illogical"},"next":{"title":"Juggler","permalink":"/Target-Machines-WriteUp/docs/HackTheBox/Battlegrounds/Cyber Mayhem/Juggler"}}');var t=s(74848),i=s(28453);const o={},a="Intertwined",c={},d=[{value:"\u4fe1\u606f\u6536\u96c6",id:"\u4fe1\u606f\u6536\u96c6",level:2},{value:"Web Service Nodejs",id:"web-service-nodejs",level:2},{value:"Port 10000 Webmin 1.984",id:"port-10000-webmin-1984",level:2}];function u(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"intertwined",children:"Intertwined"})}),"\n",(0,t.jsx)(n.h2,{id:"\u4fe1\u606f\u6536\u96c6",children:"\u4fe1\u606f\u6536\u96c6"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'Detected ss and lsof, executing related commands...\nPort: 53, PID: 586\n\u2014> Command: /lib/systemd/systemd-resolved \nPort: 22, PID: 805\n\u2014> Command: sshd: /usr/sbin/sshd -D [listener] 0 of 10-100 startups \nPort: 27017, PID: 750\n\u2014> Command: /usr/bin/mongod --config /etc/mongod.conf \nPort: 8080, PID: 1060\n\u2014> Command: node index.js \nPort: 10000, PID: 879\n\u2014> Command: /usr/bin/perl /usr/share/webmin/miniserv.pl /etc/webmin/miniserv.conf \n\n## \u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014 ##\n\nNginx is not installed.\n\n## \u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014 ##\n\nApache is not installed.\n\n## \u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014 ##\n\nChecking /etc/sudoers (active configurations only):\n  Defaults      env_reset\n  Defaults      mail_badpass\n  Defaults      secure_path="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin"\n  root  ALL=(ALL:ALL) ALL\n  %admin ALL=(ALL) ALL\n  %sudo ALL=(ALL:ALL) ALL\n\u2014\u2014\u2014\nFinding SUID files:\n/snap/snapd/17883/usr/lib/snapd/snap-confine\n/snap/core18/2667/bin/mount\n/snap/core18/2667/bin/ping\n/snap/core18/2667/bin/su\n/snap/core18/2667/bin/umount\n/snap/core18/2667/usr/bin/chfn\n/snap/core18/2667/usr/bin/chsh\n/snap/core18/2667/usr/bin/gpasswd\n/snap/core18/2667/usr/bin/newgrp\n/snap/core18/2667/usr/bin/passwd\n/snap/core18/2667/usr/bin/sudo\n/snap/core18/2667/usr/lib/dbus-1.0/dbus-daemon-launch-helper\n/snap/core18/2667/usr/lib/openssh/ssh-keysign\n/snap/core20/1778/usr/bin/chfn\n/snap/core20/1778/usr/bin/chsh\n/snap/core20/1778/usr/bin/gpasswd\n/snap/core20/1778/usr/bin/mount\n/snap/core20/1778/usr/bin/newgrp\n/snap/core20/1778/usr/bin/passwd\n/snap/core20/1778/usr/bin/su\n/snap/core20/1778/usr/bin/sudo\n/snap/core20/1778/usr/bin/umount\n/snap/core20/1778/usr/lib/dbus-1.0/dbus-daemon-launch-helper\n/snap/core20/1778/usr/lib/openssh/ssh-keysign\n/usr/lib/dbus-1.0/dbus-daemon-launch-helper\n/usr/lib/eject/dmcrypt-get-device\n/usr/lib/snapd/snap-confine\n/usr/lib/policykit-1/polkit-agent-helper-1\n/usr/lib/openssh/ssh-keysign\n/usr/bin/mount\n/usr/bin/doas\n/usr/bin/sudo\n/usr/bin/gpasswd\n/usr/bin/umount\n/usr/bin/passwd\n/usr/bin/fusermount\n/usr/bin/chsh\n/usr/bin/at\n/usr/bin/chfn\n/usr/bin/newgrp\n/usr/bin/su\n\u2014\u2014\u2014\nFinding files with special capabilities:\n  /snap/core20/1778/usr/bin/ping = cap_net_raw+ep\n  /usr/lib/x86_64-linux-gnu/gstreamer1.0/gstreamer-1.0/gst-ptp-helper = cap_net_bind_service,cap_net_admin+ep\n  /usr/bin/ping = cap_net_raw+ep\n  /usr/bin/mtr-packet = cap_net_raw+ep\n  /usr/bin/traceroute6.iputils = cap_net_raw+ep\n\u2014\u2014\u2014\n'})}),"\n",(0,t.jsx)(n.h2,{id:"web-service-nodejs",children:"Web Service Nodejs"}),"\n",(0,t.jsx)(n.p,{children:"Nodejs \u5f00\u4e86\u4e24\u4e2a\u670d\u52a1"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Port 8080 \u9759\u6001\u8def\u7531"}),"\n",(0,t.jsx)(n.li,{children:"Port 8081 \u771f\u5b9e\u670d\u52a1"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",metastring:'title="index.js"',children:'const http = require("http");\nconst app = require("./app");\nconst server = http.createServer(app);\n\nconst { API_PORT } = process.env;\nconst port = process.env.PORT || API_PORT;\n\nserver.listen(port, () => {\n    console.log(`Server running on port ${port}`);\n});\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",metastring:'title="app.js"',children:"require(\"dotenv\").config();\nrequire(\"./config/database\").connect();\nconst express = require(\"express\");\nconst bcrypt = require(\"bcryptjs\");\nconst jwt = require(\"jsonwebtoken\");\nconst bodyParser = require('body-parser');\nconst User = require(\"./model/user\");\nconst auth = require(\"./middleware/auth\");\nconst path = require('path');\nconst app = express();\nconst cookieParser = require('cookie-parser');\nconst ejs = require('ejs');\nconst { base64encode, base64decode } = require('nodejs-base64');\nconst nodesrv = require('node-srv');\n\n\n\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: true }));\napp.use(cookieParser());\n\napp.use(express.json({ limit: \"50mb\" }));\napp.set('views', path.join(__dirname, 'views'));\napp.set('view engine', 'ejs');\n//setup public folder\napp.use(express.static('./public'));\n\nvar staticfileserver = new nodesrv({\n    port: 8080,\n    root: './www',\n    logs: true\n}, function () {\n    console.log('Server stopped');\n});\n\napp.get('/logout', function(req, res){\n    cookie = req.cookies.token;\n    if(cookie != undefined){\n    res.clearCookie('token', { path: '/' })\n      res.redirect('/');\n    }\n    res.clearCookie('token', { path: '/' })\n\n    res.redirect('/');\n  });\n  \n  \napp.get(\"/\", async (req, res) => {\n  res.render('index')\n})\n\n// app.post(\"/signup\", async (req, res) => {\n//   try {\n//     // Get user input\n//     console.log(req.body)\n//     const { username, email, password } = req.body;\n\n//     // Validate user input\n//     if (!(email && password && username)) {\n//       res.status(400).send(\"All input is required\");\n//     }\n\n//     // check if user already exist\n//     // Validate if user exist in our database\n//     const oldUser = await User.findOne({ email });\n\n//     if (oldUser) {\n//       return res.status(409).send(\"User Already Exist. Please Login\");\n//     }\n\n//     //Encrypt user password\n//     encryptedPassword = await bcrypt.hash(password, 10);\n\n//     // Create user in our database\n//     const user = await User.create({\n//       username,\n//       email: email.toLowerCase(), // sanitize: convert email to lowercase\n//       password: encryptedPassword,\n//     });\n\n//     // Create token\n//     const token = jwt.sign(\n//       { user_id: user._id, email, username },\n//       process.env.TOKEN_KEY,\n//       {\n//         expiresIn: \"2h\",\n//       }\n//     );\n//     // save user token\n//     user.token = token;\n\n//     // return new user\n//     let options = {\n//       maxAge: 1000 * 60 * 15, // would expire after 15 minutes\n//       httpOnly: true, // The cookie only accessible by the web server\n//       signed: false // Indicates if the cookie should be signed\n//   }\n\n//     res.cookie('token', user.token , options) // options is optional\n//     res.status(201).redirect('/profile');\n//   } catch (err) {\n//     console.log(err);\n//   }\n// });\n\napp.post(\"/signup\", async (req, res) => {\n    res.status(500).send(\"Registration disabled\");\n})\n\n// Test Creds \n// username: testuser\n// email: test@test.htb\n// Password: testpassword\n\napp.post(\"/login\", async (req, res) => {\n  try {\n    // Get user input\n    console.log(req.body)\n    const { email, password } = req.body;\n\n    // Validate user input\n    if (!(email && password)) {\n      res.status(400).send(\"All input is required\");\n    }\n    // Validate if user exist in our database\n    const user = await User.findOne({ email });\n    console.log(user)\n    if (user && (await bcrypt.compare(password, user.password))) {\n      // Create token\n      const token = jwt.sign(\n        { user_id: user._id, email , username: user.username },\n        process.env.TOKEN_KEY,\n        {\n          expiresIn: \"2h\",\n        }\n      );\n\n      // save user token\n      user.token = token;\n    // return new user\n    let options = {\n      maxAge: 1000 * 60 * 15, // would expire after 15 minutes\n      httpOnly: true, // The cookie only accessible by the web server\n      signed: false // Indicates if the cookie should be signed\n  }\n\n      // user\n      console.log(user)\n      res.cookie('token', user.token , options) // options is optional\n\n      res.status(200).redirect('/profile');\n    }\n    res.status(400).send(\"Invalid Credentials\");\n  } catch (err) {\n    console.log(err);\n  }\n});\n\napp.get(\"/profile\", auth, (req, res) => {\n  const  ca = req.cookies.token;\n  const  base64Url = ca.split('.')[1];\n  const decodedValue = JSON.parse(base64decode(base64Url));\n  console.log(decodedValue)\n  html = showProfile(decodedValue.username)\n  res.status(200).send(html);\n});\n\n// This should be the last route else any after it won't work\napp.use(\"*\", (req, res) => {\n  res.status(404).json({\n    success: \"false\",\n    message: \"Page not found\",\n    error: {\n      statusCode: 404,\n      message: \"You reached a route that is not defined on this server\",\n    },\n  });\n});\n"})}),"\n",(0,t.jsx)(n.p,{children:"\u5728\u5176\u4e2d\u83b7\u5f97\u4e00\u4e2a\u6d4b\u8bd5\u51ed\u636e"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-plaintext",children:"username: testuser\nemail: test@test.htb\nPassword: testpassword\n"})}),"\n",(0,t.jsx)(n.h2,{id:"port-10000-webmin-1984",children:"Port 10000 Webmin 1.984"}),"\n",(0,t.jsx)(n.p,{children:"\u4f46\u662f\u6ca1\u6709\u51ed\u636e\u554a\uff0c\u4e5f\u4e0d\u80fd\u7206\u7834"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-perl",metastring:'title="/usr/share/webmin/config.cgi"',children:'#!/usr/bin/perl\n# config.cgi\n# Display a form for editing the configuration of a module.\n\nBEGIN { push(@INC, "."); };\nuse WebminCore;\nrequire \'./config-lib.pl\';\n&init_config();\n&ReadParse();\n$m = $in{\'module\'} || $ARGV[0];\n%module_info = &get_module_info($m);\n%module_info || &error($text{\'config_emodule\'});\n&foreign_available($m) || &error($text{\'config_eaccess\'});\n%access = &get_module_acl(undef, $m);\n$access{\'noconfig\'} &&\n        &error($text{\'config_ecannot\'});\nif (-r &help_file($m, "config_intro")) {\n        $help = [ "config_intro", $m ];\n        }\nelse {\n        $help = undef;\n        }\n&ui_print_header(&text(\'config_dir\', $module_info{\'desc\'}),\n                 $text{\'config_title\'}, "", $help, 0, 1);\n\nprint &ui_form_start("config_save.cgi", "post");\nprint &ui_hidden("module", $m),"\\n";\nprint &ui_table_start(&text(\'config_header\', $module_info{\'desc\'}),\n                      "width=100%", 2);\n&read_file("$config_directory/$m/config", \\%newconfig);\n&load_module_preferences($m, \\%newconfig);\n$mdir = &module_root_directory($m);\nif (-r "$mdir/config_info.pl") {\n        # Module has a custom config editor\n        &foreign_require($m, "config_info.pl");\n        local $fn = "${m}::config_form";\n        if (defined(&$fn)) {\n                $func++;\n                &foreign_call($m, "config_form", \\%newconfig);\n                }\n        }\nif (!$func) {\n        # Use config.info to create config inputs\n        my $cdir;\n        foreach my $d (map { $_."/".$m } @theme_root_directories) {\n                $cdir = $d if (-r $d."/config.info");\n                }\n        $cdir ||= $mdir;\n        &generate_config(\\%newconfig, "$cdir/config.info", $m);\n        }\nprint &ui_table_end();\nprint &ui_form_end([ [ "save", $text{\'save\'} ] ]);\n\n&ui_print_footer("/$m", $text{\'index\'});\n'})}),"\n",(0,t.jsxs)(n.p,{children:["\u4e0b\u6b21\u53ef\u4ee5\u5c1d\u8bd5\u8bfb\u53d6 ",(0,t.jsx)(n.code,{children:"/etc/webmin/miniserv.users"})]})]})}function l(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(u,{...e})}):u(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>a});var r=s(96540);const t={},i=r.createContext(t);function o(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);